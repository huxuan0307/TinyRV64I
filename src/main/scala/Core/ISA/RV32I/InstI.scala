package Core.ISA.RV32I

import Core.Inst
import chisel3.util.BitPat

object InstI extends Inst {
  // InstI_ALU
  // use imm12 and rs1
  // use rd
  //                            |---imm12----|-rs1-|func3|--rd-|-opcode-|
  val ADDI  : BitPat  = BitPat("b????????????_?????__000__?????_0010011")
  val SLTI  : BitPat  = BitPat("b????????????_?????__010__?????_0010011")
  val SLTIU : BitPat  = BitPat("b????????????_?????__011__?????_0010011")
  val XORI  : BitPat  = BitPat("b????????????_?????__100__?????_0010011")
  val ORI   : BitPat  = BitPat("b????????????_?????__110__?????_0010011")
  val ANDI  : BitPat  = BitPat("b????????????_?????__111__?????_0010011")
  // InstI_SHIFT
  // use shamt and rs1
  // use rd
  //                            |-func7-|shamt|-rs1-|func3|--rd-|-opcode-|
  val SLLI  : BitPat  = BitPat("b0000000_?????_?????__001__?????_0010011")
  val SRLI  : BitPat  = BitPat("b0000000_?????_?????__101__?????_0010011")
  val SRAI  : BitPat  = BitPat("b0100000_?????_?????__101__?????_0010011")
  // InstI_LOAD
  // use imm12 and rs1
  // use rd
  //                            |---imm12----|-rs1-|func3|--rd-|-opcode-|
  val LB    : BitPat  = BitPat("b????????????_?????__000__?????_0000011")
  val LH    : BitPat  = BitPat("b????????????_?????__001__?????_0000011")
  val LW    : BitPat  = BitPat("b????????????_?????__010__?????_0000011")
  val LBU   : BitPat  = BitPat("b????????????_?????__100__?????_0000011")
  val LHU   : BitPat  = BitPat("b????????????_?????__101__?????_0000011")
  // InstI_JUMP
  // use imm12 and rs1
  // use rd
  //                            |---imm12----|-rs1-|func3|--rd-|-opcode-|
  val JALR  : BitPat  = BitPat("b????????????_?????__000__?????_1100111")
  // InstI_FENCE
  //                              |----|pred|succ|-----|func3|-----|-opcode-|
  val FENCE   : BitPat  = BitPat("b0000_????_????_00000__000__00000_0001111")
  val FENCE_I : BitPat  = BitPat("b0000_0000_0000_00000__001__00000_0001111")
  // InstI_SYSTEM
  // use imm12 and rs1
  // use rd
  //                              |------------|-----|func3|--rd-|-opcode-|
  val ECALL   : BitPat  = BitPat("b000000000000_00000__000__?????_1110011")
  val EBREAK  : BitPat  = BitPat("b000000000001_00000__000__?????_1110011")
  //                              |----CSR-----|-rs1-|func3|--rd-|-opcode-|
  val CSRRW   : BitPat  = BitPat("b????????????_?????__001__?????_1110011")
  val CSRRS   : BitPat  = BitPat("b????????????_?????__010__?????_1110011")
  val CSRRC   : BitPat  = BitPat("b????????????_?????__011__?????_1110011")
  //                              |----CSR-----|-zimm|func3|--rd-|-opcode-|
  val CSRRWI  : BitPat  = BitPat("b????????????_?????__101__?????_1110011")
  val CSRRSI  : BitPat  = BitPat("b????????????_?????__110__?????_1110011")
  val CSRRCI  : BitPat  = BitPat("b????????????_?????__111__?????_1110011")


}
